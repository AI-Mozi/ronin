#
# Ronin - A decentralized repository for the storage and sharing of computer
# security advisories, exploits and payloads.
#
# Copyright (c) 2007 Hal Brodigan (postmodern at users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'parameters'
require 'exploits/exploit'
require 'repo/objectcontext'

module Ronin
  module Repo
    class ExploitContext < ObjectContext

      include Parameters

      def initialize(path)
	# initialize exploit metadata
	metadata_set(:advisory)
	metadata_set(:restricted)

	param(:pad) {
	  set_desc "padding string"
	  set_value "A"
	}
	param(:payload,"exploit payload")

	super(path)
      end

      def create
	return Exploit.new(advisory) do |exp|
	  load_exploit(exp)
	end
      end

      protected

      # Name of object to load
      attr_object :exploit

      # Advisory the exploit represents
      attr_metadata :advisory
      
      # Restricted text for the exploit
      attr_metadata :restricted

      # 'pad' param for the exploit
      attr_metadata :pad

      # 'payload' param for the exploit
      attr_metadata :payload

      # Build action for the exploit
      attr_action :builder

      # Clean action for the exploit
      attr_action :cleaner
      
      # Transmit action for the exploit
      attr_action :transmitter

      def load_exploit(exp)
	# load exploit metadata
	exp.name = name
	exp.version = version

	exp.authors.merge!( authors.values.map { |auth| auth.to_author } )

	exp.restricted = restricted

	exp.params.merge!(params)

	# load exploit actions
	cleaner_action = get_action(:cleaner)
	exp.cleaner(&(cleaner_action.block)) if cleaner_action

	builder_action = get_action(:builder)
	exp.builder(&(builder_action.block)) if cleaner_action

	transmitter_action = get_action(:transmitter)
	exp.transmitter(&(transmitter_action.block)) if transmitter_action
      end

    end
  end
end
