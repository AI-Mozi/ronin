#
# Ronin - A decentralized repository for the storage and sharing of computer
# security advisories, exploits and payloads.
#
# Copyright (c) 2007 Hal Brodigan (postmodern at users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'exploit'
require 'repo/objectcontext'

module Ronin
  module Repo
    class ExploitContext < ObjectContext

      # The exploit
      attr_reader :exploit

      def initialize(path,category)
	super(path,category)

	@metadata['advisory'] = nil
	@metadata['restricted'] = nil

	@exploit = nil
      end

      def initialize_object
	ObjectContext::initialize_object
	create_exploit
      end

      def create_exploit
	@exploit = Exploit.new(self.advisory)
	load_exploit(@exploit)
      end

      def perform_build
	return unless @exploit
	@exploit.build! { perform_action('build') }
      end

      def perform_clean
	return unless @exploit
	@exploit.clean! { perform_action('clean') }
      end

      def perform_transmit
	return unless @exploit
	@exploit.transmit! { perform_action('build') }
      end

      protected

      # Advisory the exploit represents
      attr_metadata :advisory
      
      # Restricted text for the exploit
      attr_metadata :restricted

      # 'pad' param for the exploit
      attr_metadata :pad

      # 'lhost' param for the exploit
      attr_metadata :lhost

      # 'lport' param for the exploit
      attr_metadata :lport

      # Build action for the exploit
      attr_action :build

      # Clean action for the exploit
      attr_action :clean
      
      # Transmit action for the exploit
      attr_action :transmit

      def load_exploit(exploit)
	exploit.name = self.name
	exploit.version = self.version
	exploit.author = self.author
	exploit.restricted = self.restricted

	exploit.params['pad'] = self.pad
	exploit.params['lhost'] = self.lhost
	exploit.params['lport'] = self.lport
      end

    end
  end
end
