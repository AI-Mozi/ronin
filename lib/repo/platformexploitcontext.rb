#
# Ronin - A decentralized repository for the storage and sharing of computer
# security advisories, exploits and payloads.
#
# Copyright (c) 2007 Hal Brodigan (postmodern at users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'platformexploit'
require 'repo/exploitcontext'

module Ronin
  module Repo
    class TargetContext

      def initialize(&block)
	metadata_set(:product_version,'0.0.0')
	metadata_set(:platform,nil)
	metadata_set(:comments,"")

	instance_eval(&block) if block
      end

      def to_target
	Target.new(product_version,platform,comments)
      end

      protected

      include ObjectMetadata

      # Targeted product version
      attr_metadata :product_version

      # Targeted platform
      attr_metadata :platform

      # Target comments
      attr_metadata :comments

    end

    class PlatformExploitContext < ExploitContext

      # The platform exploit targets
      attr_reader :targets

      def initialize(path)
	@targets = []

	metadata_set(:prefix,"")
	metadata_set(:postfix,"")

	super(path)
      end

      def create
	return PlatformExploit.new(advisory) do |exp|
	  load_platformexploit(exp)
	end
      end

      protected

      # Prefix of the platform exploit
      attr_metadata :prefix
      
      # Postfix of the platform exploit
      attr_metadata :postfix

      def target(&block)
	@targets << TargetContext.new(&block)
      end

      def load_platformexploit(exp)
	load_exploit(exp)

	exp.prefix = prefix
	exp.postfix = postfix

	@targets.each do |target|
	  exp.add_target(target.to_target)
	end
      end

    end
  end
end
