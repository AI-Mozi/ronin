#
# Ronin - A decentralized repository for the storage and sharing of computer
# security advisories, exploits and payloads.
#
# Copyright (c) 2007 Hal Brodigan (postmodern at users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'exploits/exploit'
require 'exploits/networkexploit'

module Ronin
  class WebExploit < Exploit

    include NetworkExploit

    def initialize(advisory=nil)
      param(:lhost,'local host')
      param(:lport,'local port')
      param(:rhost,'remote host')
      param(:rport) {
        @desc = 'remote port'
	@value = 80
      }

      super(advisory)
    end

    def http_session
      unless rhost
        raise MissingParam, "Missing '#{param_desc(:rhost)}' parameter", caller
      end

      unless rport
        raise MissingParam, "Missing '#{param_desc(:port)}' parameter", caller
      end

      Net::HTTP.start(rhost,rport) do |http|
	yield http if block_given?
      end
    end

    def http_get(path)
      http_session do |http|
	resp = http.get(path)

	if block_given?
	  yield resp
	else
	  return resp
	end
      end
    end

    def http_post(path,fields={})
      http_session do |http|
	resp = http.post(path,fields)

	if block_given?
	  yield resp
	else
	  return resp
	end
      end
    end

  end
end
