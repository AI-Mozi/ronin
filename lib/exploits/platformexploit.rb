#
# Ronin - A decentralized repository for the storage and sharing of computer
# security advisories, exploits and payloads.
#
# Copyright (c) 2007 Hal Brodigan (postmodern at users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'platform'
require 'exploits/exploit'
require 'formating/binary'

require 'og'

module Ronin
  module Exploits
    class Target

      # Targeted product version
      attr_accessor :product_version, String

      # Targeted platform
      has_one :platform

      # Target comments
      attr_accessor :comments, String

      belongs_to :PlatformExploit

      def initialize(product_version='',platform=nil,comments="",&block)
	@product_version = product_version
	@platform = platform
	@comments = comments

	block.call(self) if block
      end

    end

    class PlatformExploit < Exploit

      # Prefix string
      attr_accessor :prefix, String

      # Postfix string
      attr_accessor :postfix, String

      # Targets
      has_many :targets

      # Target index to use
      parameter :target_index, :desc => 'default target index', :value => 0

      # Custom target to use
      parameter :custom_target, :desc => 'custom target'

      def initialize(advisory=nil)
	@prefix = ""
	@postfix = ""
	@targets = []

	super(advisory)
      end

      def target(product_version='',platform=nil,comments="",&block)
	add_target(Target.new(product_version,platform,comments,&block))
      end

      def add_target(target)
	@targets << target
      end

      def get_target
	return custom_target if custom_target
	return @targets[target_index]
      end

    end
  end
end
