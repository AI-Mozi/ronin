#
#--
# Ronin - A Ruby platform designed for information security and data
# exploration tasks.
#
# Copyright (c) 2006-2008 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#++
#

require 'ronin/vulnerability/exceptions/unknown_behavior'
require 'ronin/extensions/meta'
require 'ronin/model'

module Ronin
  module Vulnerability
    class Behavior

      include Model

      # Primary key of the behavior
      property :id, Serial

      # Name of the behavior
      property :name, String

      # Description for the behavior
      property :description, Text

      # Validates
      validates_present :name, :description
      validates_is_unique :name

      #
      # Returns the Behavior with the specified _name_. If no such Behavior
      # can be found, an UnknownBehavior exception will be raised.
      #
      def self.named(name)
        name = name.to_s
        behavior = self.first(:name => name)

        unless behavior
          raise(UnknownBehavior,"unknown behavior #{name.dump}",caller)
        end

        return behavior
      end

      #
      # Returns the name of the behavior.
      #
      def to_s
        @name.to_s
      end

      protected

      #
      # Defines a new builtin Behavior with the specified _name_ and the
      # given _options_. If a _block_ is given, it will be passed newly
      # created Behavior objects.
      #
      # _options_ may contain the following keys:
      # <tt>:description</tt>:: The description of the effect.
      #
      def Behavior.define(name,options={})
        name = name.to_s
        description = options[:description]

        meta_def(name.to_method_name) do
          Behavior.first_or_create(
            :name => name,
            :description => description
          )
        end

        return nil
      end

      define :memory_read
      define :memory_write
      define :file_open
      define :file_read
      define :file_write
      define :file_modify
      define :file_mtime
      define :file_ctime
      define :file_ownership
      define :file_close
      define :socket_open
      define :socket_read
      define :socket_write
      define :socket_close
      define :code_execution
      define :command_execution
      define :privledge_escalation

    end
  end
end
