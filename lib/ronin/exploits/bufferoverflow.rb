#
# Ronin - A decentralized repository for the storage and sharing of computer
# security advisories, exploits and payloads.
#
# Copyright (c) 2007 Hal Brodigan (postmodern at users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/exploits/platformexploit'

require 'og'

module Ronin
  module Exploits
    class BufferOverflowTarget < Target

      # Buffer length
      attr_accessor :buffer_length, Integer

      # Return length
      attr_accessor :return_length, Integer

      # Instruction Pointer
      attr_accessor :ip, Integer

      # Stack base pointer
      attr_accessor :bp, Integer

      belongs_to :buffer_overflow

      def initialize(product=nil,platform=nil,arch=nil,buffer_length=0,return_length=1,ip=0x0,bp=ip,comments='',&block)
        @buffer_length = buffer_length
        @return_length = return_length
        @ip = ip
        @bp = bp

        super(product,platform,arch,comments,&block)
      end

    end

    class BufferOverflow < PlatformExploit

      has_many :targets, BufferOverflowTarget

      def initialize(name=nil,version=nil,&block)
        builder do |bof|
          bof.data = bof.prefix.to_s + bof.build_buffer + bof.postfix.to_s
        end

        super(name,version,&block)
      end

      def target(product=nil,platform=nil,arch=nil,buffer_length=0,return_length=0,bp=0x0,ip=0x0,comments='',&block)
        add_target(BufferOverflowTarget.new(product,platform,arch,buffer_length,return_length,bp,ip,comments='',&block))
      end

      def build_buffer(opts={:target => get_target, :payload => payload})
        target = opts[:target]
        payload = opts[:payload].to_s

        unless payload.length<=target.buffer_length
          raise(PayloadSize,"the specified payload is too large for the target's buffer length",caller)
        end

        buffer = pad_buffer(@pad,(target.buffer_length-payload.length))+payload

        ip_packed = target.ip.pack(target.platform.arch)
        unless target.bp==0
          buffer += (target.bp.pack(target.platform.arch)+ip_packed)*target.return_length
        else
          buffer += ip_packed*(target.return_length*2)
        end

        return buffer
      end

    end
  end
end
