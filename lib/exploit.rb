#
# Ronin - A decentralized repository for the storage and sharing of computer
# security advisories, exploits and payloads.
#
# Copyright (c) 2007 Hal Brodigan (postmodern at users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'advisory'
require 'parameters'
require 'exceptions/exploitnotbuilt'

module Ronin
  class Exploit

    include Parameters

    # Vulnerability information
    attr_accessor :advisory

    # Name of the specific exploit
    attr_accessor :name

    # Version of the exploit
    attr_accessor :version

    # Author of the exploit
    attr_accessor :author

    # Exploit parameters
    attr_accessor :params

    # Exploit output
    attr_reader :data

    # Restricted pattern that may not occurr in the exploit output
    attr_accessor :restricted

    def initialize(advisory=nil,&block)
      @advisory = advisory
      @name = ""
      @version = ""
      @author = ""
      @data = nil
      @restricted = nil
      @build_block = nil
      @clean_block = nil
      @transmit_block = nil

      add_param(:pad,'text to use for padding','A')
      add_param(:lhost,'local host')
      add_param(:lhost,'local port')
      add_param(:rhost,'remote host')
      add_param(:rhost,'remote port')

      block.call(self) if block
    end

    def restrict(pattern)
      if @restricted
        @restricted = @restricted.union(pattern)
      else
	@restricted = pattern
      end
    end

    def builder(&block)
      @build_block = block
    end

    def build
      if block_given?
        @data = ""

	if block_given?
	  yield self
	elsif @build_block
	  @build_block.call(self)
	end

	if (@data && @restricted)
	  if @restricted =~ @data
	    raise RestrictedText, "Restricted text was found in the exploit output", caller
	  end
	end
      end
    end

    def cleaner(&block)
      @clean_block = block
    end

    def clean
      if block_given?
	yield self
      elsif @clean_block
	@clean_block.call(self)
      end

      @data = nil
    end

    def transmit_tcp
      unless rhost
        raise MissingParam, "missing 'remote host' parameter", caller
      end

      unless rport
        raise MissingParam, "missing 'remote port' parameter", caller
      end

      TCPSocket.new(rhost,rport) do
        yield if block_given?
      end
    end

    def transmit_udp
      unless rhost
        raise MissingParam, "missing 'remote host' parameter", caller
      end

      unless rport
        raise MissingParam, "missing 'remote port' parameter", caller
      end

      UDPSocket.new(rhost,rport) do |socket|
	socket.bind(lhost,lport) if lhost && lport

        yield if block_given?
      end
    end

    def transmitter(&block)
      @transmit_block = block
    end

    def transmit
      unless (@data && @data.length)
	raise ExploitNotBuilt, "cannot transmit unbuilt exploit", caller
      end

      if block_given?
	yield self
      elsif @transmit_block
	@transmit_block.call(self)
      end
    end

    def to_s
      return @data if @data
      return ""
    end

    protected

    def method_missing(sym,*args)
      name = sym.id2name
      param_value(name) if has_param?(name)
    end

  end
end
