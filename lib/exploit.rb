#
# Ronin - A decentralized repository for the storage and sharing of computer
# security advisories, exploits and payloads.
#
# Copyright (c) 2007 Hal Brodigan (postmodern at users.sourceforge.net)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'advisory'
require 'parameters'

module Ronin
  class Exploit

    # Vulnerability information
    attr_reader :advisory

    # Name of the specific vulnerability.
    attr_reader :name

    # Version of the vulnerability
    attr_reader :version

    # Exploit parameters
    attr_accessor :params

    # Exploit output
    attr_accessor :data

    # Restricted pattern that may not occurr in the exploit output
    attr_accessor :restricted

    def initialize(advisory=nil)
      @advisory = advisory
      @name = nil
      @version = nil
      @params = Parameters.new
      @data = nil
      @restricted = nil

      params.add_param('pad','text to use for padding')

      params.add_param('lhost','local host')
      params.add_param('lhost','local port')
      params.add_param('rhost','remote host')
      params.add_param('rhost','remote port')
    end

    def build!
      if block_given?
	@data = ""
        yield self

	if @restricted && @restricted =~ @data
	  raise RestrictedText, "Restricted text was found in the exploit output", caller
	end
      end
    end

    def clean!
      if block_given?
        yield self
      end
      @data = nil
    end

    def get_pad
      padding = params['pad']
      unless padding
        padding = ENV['pad']
	unless padding
	  padding = 'A'
	end
      end
      return padding
    end

    def transmit_tcp
      rhost = param['rhost']
      unless rhost
        raise MissingParam, "missing 'remote host' parameter", caller
      end

      rport = param['rport']
      unless rport
        raise MissingParam, "missing 'remote port' parameter", caller
      end

      TCPSocket.new(rhost,rport) do
        yield if block_given?
      end
    end

    def transmit_udp
      rhost = param['rhost']
      unless rhost
        raise MissingParam, "missing 'remote host' parameter", caller
      end

      rport = param['rport']
      unless rport
        raise MissingParam, "missing 'remote port' parameter", caller
      end

      UDPSocket.new(rhost,rport) do |socket|
	lhost = param['lhost']
	lport = param['lport']
	socket.bind(lhost,lport) if lhost && lport

        yield if block_given?
      end
    end

    def transmit
      if @data && @data.length
        if block_given?
          yield self
        end
      end
    end

    def to_s
      @data
    end

  end
end
